
                                                        1. DERS (13.08.2022)

-local sadece biz, global gecerli kullanicilar, system herkes
-Terminal kodlarini bilmemiz lazim interwiewlerde soruluyor
-   Repo=Depo (Repository)
-   git init:
-   working Space : .git klasorunun bulundugu calisma alanimizdir (yereldedeki)
                    klasor ve dosyalar uzerinden degisiklik burada yapilir

-   Staging Area : Bekleme alanimiz (commit edilecek dosyalar burada bekler, yazici kuyrugu mantigi)
                   versiyon olusturulacak dos veye klsorlerin gecici olarak toplandigi yerdir
                   version (commit) olusturulduktan sonra staging area otmatik olarak bosaltilir

-   Commit Store : Git coomitlerin ayri ayri version olarak tutuldugu yerdir

-   git add . veya git add dosya_adi : projeyi working space deki projeyi Staging Area'ya gonderir

-    git commit : Staging Area'dan Commit Store'a projeyi gondermek icin kullanilir
                    -git commit -m "1.C" : -m  versiyon metni yazdirmak icin, "1.C"'de versiyon metnimiz

-    git log --oneline : git log, Versiyonla ilgili loglar icin; --oneline logun sadece ilk satiri icin
                        -git log butun logu yazdirir
                        - hash_kodu bu komut ile gorulebilir

- git status : Genel durum ile ilgili bilgi verir

- git show [hash_kodu] : Versiyondaki değişiklikleri gösterir
                         - hash_kodu 522fdb6 gibi bir koddur ve git log --oneline ile gorulebilir

- Bir repo içinde birden fazla commit olabilir. Bunlardan en son alınan commit’e HEAD denir. 522fdb6 (HEAD -> master) 4.C gibi

- Working space ve
  Stage Area ile ilgili ; - git restore [dosya] :Working spac'deki Tek bir dosyayı iptal eder
                          - git restore .  : Working spac'deki Tüm dosyaları iptal eder
                          - git restore --staged [dosya] : Stage Area'daki Tek bir dosyayı iptal eder
                          - git restore --staged . : Stage Area'daki Tüm dosyaları iptal eder

- Commit Store ile ilgili ; - git checkout [hash] [dosya] : versiyon icindeki "dosya", hash ile belirtilen versiyona döner
                            - git git checkout [hash] .  : Hash değeri verilen versiyona döner
                                                 ==> "." cok onemli eger nokta konulmazsa hash degeri yazilan
                                                         version haricindeki tum versionlar silinir

- Önceki versiyonlara dome; 1. Yontem(Checkout): -git checkout [hash] . komutuyla donulup incelenebilir,
                                                 -git commit –m "3.C" komutuyla kalıcı hale getirilebilir
                                                        * bu yontemde eski versiyonlar kalir istenildiginde donulebilir

                             2. Yontem(Reset):   - git reset --hard [hash] bu komutla hash kodu yazilan versiona donulur
                                                    degisiklikler geri alinamaz

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                     2. DERS (15.08.2022)

- Github'da repo olusturma: Github hesabinda repositories kismindan ilgili adimlar takip edilerek islemler yapilir
    -- Bu asamada suna dikkat edilmelidir; repo olusturulduktan sonra repo url'si (adresi) ve sol taraftaki
       yardimci kodlar git'ten gitgub'a push pull yapabilmek icin kullanilacak

- git ile olusturulan versiyonu Gitub'a push & pull etme:
    --   1-) git init --> klasoru ile git'i iliskilendir (gizli .git klasoru olusur )
         2-) git add . --> klasoru Working Area'dan Stage Area'ya aktarir
         3-) git commit -m "mesaj" --> adi mesaj olan yeni bir commit olusturur

         4-)  git remote add origin adres  --> Bu satirdaki adres Github'da olusturdugumuz repo'nu url'si
              git push -u origin master    --> burada master kabul etmezse main kullanilabilir
                                                  ---bu iki komut ilk defa yazildiktan sonra git ile Github arasinda
                                                     bag kurulmus olur ve ilk olarak proje gitHub'a yuklenir.
         5-) git push --> Yukaridaki iki satirdan sonra artik bu komutla degisikliklerden sonra push islemi yapilabilir.

         Kavramlar

      - Push --> Lokalde oluşturulan commit lerin github a gönderilmesi işlemidir.
      - Fetch --> Github daki en son versiyonun, lokal ile karşılaştırılarak varsadeğişiklik lerinindirilmesi işlemidir.
      - Merge --> İndirilen değişikliklerin lokale uygulanması işlemidir
      - Pull --> Fetch ve Merge işlemini tek başına yapar
      - Clone --> Github daki bir repoyu lokale indirme işlemidir

-1 Branch dal demektir.
    --branch'ler git uzerinde calisilan ana branch(main & master)'a yeni calisma yollari(dallar) ekleyerek,
        projenin daha guvenli, hizli, daha az hatali, kontrol edilebilir(vb) olmasini saglamak amaciyla kullanilir

- Branch Komutlari;
                    git branch [isim] ==> Yeni branch oluşturur
                    git branch ==> Mevcut branch leri listeler
                    git checkout [isim] ==> Branch aktif hale gelir
                    git branch –d [isim] ==> Branch i siler
                    git branch -m [isim] ==> Branch ismini değiştirir
                    git merge [isim] ==> İki branch i birleştirir // yani iki branch'i esitler (aktif olani pasif olana)

- Github dan commit çekme (pulling);
    -git fetch --> Değişiklikleri remote’dan local’e indirir
    -git merge --> İndirilen değişiklikleri local repoya uygular
                    sirasiyla ustteki iki komut veya
    -git pull --> fetch & merge ====> komutu kullanilir



                        CİHAZ KONTROLLLLLLLLLLLLLLLLLLLLL
                        CİHAZ KONTROLLLLLLLLLLLLLLLLLLLLL222222222222


